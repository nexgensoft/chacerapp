syntax = "proto3";

package chacerapp.v1;

import "chacerapp/iam/v1/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Chacerapp.V1";
option go_package = "github.com/chacerapp/apiserver/server/serverpb";
option java_multiple_files = true;
option java_outer_classname = "AccountsProto";
option java_package = "com.chacerapp.v1";
option php_namespace = "Chacerapp\\V1";

// Accounts provides a service for managing accounts
service Accounts {
  // ListAccounts will retrieve a list of accounts
  //
  // An empty result will be returned when no accounts exist.
  //
  // (-- api-linter: core::0132::method-signature=disabled
  //     aip.dev/not-precedent: Accounts are top level resources and have no parent. --)
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.list";
    option (google.api.http) = {
      get: "/v1/accounts"
    };
  }

  // CreateAccount will create a new account
  //
  // An AlreadyExists error will be returned when the resulting account's
  // resource name conflicts with an existing account.
  //
  // (-- api-linter: core::0133::http-uri-parent=disabled
  //     aip.dev/not-precedent: Accounts are top level resources and have no parent. --)
  // (-- api-linter: core::0133::method-signature=disabled
  //     aip.dev/not-precedent: Accounts are top level resources and have no parent. --)
  rpc CreateAccount(CreateAccountRequest) returns (Account) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.create";
    option (google.api.method_signature) = "account,account_id";
    option (google.api.http) = {
      post: "/v1/accounts",
      body: "account"
    };
  }

  // GetAccount will retrieve an account
  //
  // A NotFound error will be returned when an account does not exist.
  rpc GetAccount(GetAccountRequest) returns (Account) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.get";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {
      get: "/v1/{name=accounts/*}"
    };
  }

  // UpdateAccount will update an account
  //
  // This endpoint will return a NotFound error when the provided
  // account does not exist.
  rpc UpdateAccount(UpdateAccountRequest) returns (Account) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.update";
    option (google.api.method_signature) = "account,update_mask";
    option (google.api.http) = {
      patch: "/v1/{account.name=accounts/*}",
      body: "account"
    };
  }

  // DeleteAccount will delete an account from the system.
  //
  // This operation can not be reversed. Once an account has been deleted,
  // all data associated with that account will also be deleted. A NotFound
  // error will be returned when an account could not be found.
  rpc DeleteAccount(DeleteAccountRequest) returns (Account) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.delete";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {
      delete: "/v1/{name=accounts/*}"
    };
  }

  // ActivateAccount will activate a pending account.
  //
  // An account can only be activated when it is in the PENDING or SUSPENDED phase. A
  // FailedPrecondition error will be returned when an account is in any other phase.
  // A NotFound error will be returned when the requested account does not exist.
  rpc ActivateAccount(ActivateAccountRequest) returns (ActivateAccountResponse) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.activate";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {
      post: "/v1/{name=accounts/*}:activate",
      body: "*"
    };
  }

  // SuspendAccount will suspend an active account.
  //
  // An account can only be suspended when the account is active. If the account is
  // not active, a FailedPrecondition error will be returned. A NotFound error is
  // returned when the requested account does not exist.
  rpc SuspendAccount(SuspendAccountRequest) returns (SuspendAccountResponse) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.suspend";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {
      post: "/v1/{name=accounts/*}:suspend",
      body: "*"
    };
  }

  // GetAccountStatus will retrieve the status for an account
  //
  // A NotFound error will be returned when the account does not exist.
  rpc GetAccountStatus(GetAccountStatusRequest) returns (AccountStatus) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.getStatus";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {
      get: "/v1/{name=accounts/*/status}"
    };
  }

  // UpdateAccountStatus will update the status for an account
  //
  // A NotFound error will be returned when the account does not exist.
  rpc UpdateAccountStatus(UpdateAccountStatusRequest) returns (AccountStatus) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.update";
    option (google.api.method_signature) = "account_status,update_mask";
    option (google.api.http) = {
      patch: "/v1/{account_status.name=accounts/*/status}",
      body: "account_status"
    };
  }

  // GetAccountQuotas will retrieve the quotas for an account
  //
  // A NotFound error will be returned when the account does not exist.
  rpc GetAccountQuotas(GetAccountQuotasRequest) returns (AccountQuotas) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.getQuotas";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {
      get: "/v1/{name=accounts/*/quotas}"
    };
  }

  // UpdateAccountQuotas will update the quotas for an account
  //
  // A NotFound error will be returned when the account does not exist.
  rpc UpdateAccountQuotas(UpdateAccountQuotasRequest) returns (AccountQuotas) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.updateQuotas";
    option (google.api.method_signature) = "account_quotas,update_mask";
    option (google.api.http) = {
      patch: "/v1/{account_quotas.name=accounts/*/quotas}",
      body: "account_quotas"
    };
  }
}

// Represents an account in the platform
//
// An account represents a collection of resources that are provisioned
// within the platform. When an account is deleted, the phase
message Account {
  option (google.api.resource) = {
    type: "chacerappapis.com/Account",
    plural: "accounts",
    singular: "account",
    pattern: "accounts/{account}",
  };

  // The name of the resource.
  //
  // Example: accounts/joes-accounts-efb2e
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The name that should be used when displaying the account.
  //
  // Example: Joe's Account
  //
  // This value should be at most 64 characters.
  string display_name = 2 [(google.api.field_behavior) = REQUIRED];

  // Arbitrary key/value pairs that can be used to classify or
  // tag a resource.
  //
  // Example: "city" = "dallas"
  //
  // Each label value is restricted to be at most 64 characters in
  // length and must only contain the characters a-z, A-Z, 0-9, -,
  // _, or space. The value must be a non-empty value and must not
  // start or end in spaces.
  map<string, string> labels = 5;

  // Annotations are key/value pairs that can be used to hold configuration
  // data related to third party integrations and may also contain configuration
  // when working with different version of the same data model.
  //
  // Example: "example-integration.com/" = ""
  //
  // Annotations are not well documented resources and will have a shorter
  // deprecation cycle than fields defined on a resource.
  map<string, string> annotations = 6;

  // The status of the account. The UpdateAccountStatus
  // RPC should be used to update this resource.
  AccountStatus status = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The limits for resources on the account.
  AccountQuotas quotas = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Server-defined URL for the resource.
  string self_link = 100 [(google.api.field_behavior) = OUTPUT_ONLY];

  // A unique identifer for the resource.
  string uid = 101 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The time the account was created.
  google.protobuf.Timestamp create_time = 102 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The time the account was updated.
  google.protobuf.Timestamp update_time = 103 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The time of when the account was requested to be deleted.
  google.protobuf.Timestamp delete_time = 104 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// AccountQuotas designates any limits on the accounts. These
// values are determined by the billing subscription the account
// is registered for. To increase these limits see the
// billing.UpdateSubscription endpoint.
message AccountQuotas {
  option (google.api.resource) = {
    type: "chacerappapis.com/AccountQuotas",
    plural: "accountQuotas",
    singular: "accountQuotas",
    pattern: "accounts/{account}/quotas",
  };

  // The name of the resource in the format `accounts/*`
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The max number of locations that are allowed
  // to exist on the account.
  int32 locations = 2 [(google.api.field_behavior) = REQUIRED];

  // The max number of devices that can be created
  // on the account.
  int32 devices = 3 [(google.api.field_behavior) = REQUIRED];
}

// AccountStatus represents the status of an account.
message AccountStatus {
  option (google.api.resource) = {
    type: "chacerappapis.com/AccountStatus",
    plural: "accountStatus",
    singular: "accountStatus",
    pattern: "accounts/{account}/status",
  };

  // The name of the resource in the format `accounts/*/status`
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The phase of the accont.
  AccountPhase phase = 2 [(google.api.field_behavior) = REQUIRED];

  // The reason that an account is in a phase.
  string reason = 3;

  // A longer message for why an account is in a phase.
  string message = 4;
}

// ListAccountsRequest will return a paginated list of accounts.
//
// (-- api-linter: core::0132::request-parent-required=disabled
//     aip.dev/not-precedent: Accounts are top level resources and have no parent. --)
message ListAccountsRequest {
  // The max number of results per page that should be returned. If the number
  // of available results is larger than `page_size`, a `next_page_token` is
  // returned which can be used to get the next page of results in subsequent
  // requests. Acceptable values are 0 to 500, inclusive. (Default: 10)
  // The default value is used when a page_size of 0 is provided.
  int32 page_size = 1;

  // Specifies a page token to use. Set this to the nextPageToken returned by
  // previous list requests to get the next page of results.
  string page_token = 2;
}

// ListAccountsResponse will list the accounts.
message ListAccountsResponse {
  // A list of accounts.
  repeated Account accounts = 1;

  // This token allows you to get the next page of results for list requests.
  // If the number of results is larger than `page_size`, use the
  // `next_page_token` as a value for the query parameter `page_token` in the
  // next request. The value will become empty when there are no more pages.
  string next_page_token = 2;
}

// CreateAccountRequest will
//
// (-- api-linter: core::0133::request-parent-required=disabled
//     aip.dev/not-precedent: We need to do this because reasons. --)
message CreateAccountRequest {
  // The account that should be created.
  Account account = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the account, which will become the final component of
  // the accounts's resource name.
  //
  // This value should be between 4 and 63 characters. Valid characters
  // are /[a-z][0-9]-/.
  string account_id = 2;
}

// UpdateAccountRequest will update the account.
message UpdateAccountRequest {
  // The account that should be updated.
  Account account = 1;

  // The update mask that applies to the resource.
  google.protobuf.FieldMask update_mask = 2;
}

// GetAccountRequest will get an account.
message GetAccountRequest {
  // The name of the account to get.
  // Specified in the format 'accounts/*`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/Account"
  ];
}

// ActivateAccountRequest will approve an account and activate it.
message ActivateAccountRequest {
  // The name of the account to delete.
  // Specified in the format 'accounts/*`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/Account"
  ];
}

// ActivateAccountResponse will activate an account.
message ActivateAccountResponse {}

// SuspendAccountRequest will approve an account and activate it.
message SuspendAccountRequest {
  // The name of the account to delete.
  // Specified in the format 'accounts/*`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/Account"
  ];

  // The reason why the account is being suspended. The following
  // reasons are currently supported.
  //
  // Supported Values:
  // - Billing
  // - Fraud
  string reason = 2 [(google.api.field_behavior) = REQUIRED];

  // A longer message explaining why the account has been suspended.
  string message = 3;
}

// SuspendAccountResponse will suspend an account.
message SuspendAccountResponse {
  // The name of the account to Suspend.
  // Specified in the format 'accounts/*`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/Account"
  ];
}

// DeleteAccountRequest will delete an account.
message DeleteAccountRequest {
  // The name of the account to delete.
  // Specified in the format 'accounts/*`.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/Account"
  ];
}

// GetAccountStatusRequest will retrieve the status for an account.
message GetAccountStatusRequest {
  // The name of the account status to retrieve. This must be
  // in the format of "accounts/*/status".
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/AccountStatus"
  ];
}

// UpdateAccountStatusRequest will update the quotas on an account
message UpdateAccountStatusRequest {
  // The quotas to set on the account.
  AccountStatus account_status = 1;

  // The update mask that applies to the resource.
  google.protobuf.FieldMask update_mask = 2;
}

// GetAccountQuotasRequest will retieve the quotas for an account
message GetAccountQuotasRequest {
  // The name of the account quotas to retrieve. This must be
  // in the format of "accounts/*/quotas".
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/AccountQuotas"
  ];
}

// UpdateAccountQuotasRequest will update the quotas on an account
message UpdateAccountQuotasRequest {
  // The quotas to set on the account.
  AccountQuotas account_quotas = 1;

  // The update mask that applies to the resource.
  google.protobuf.FieldMask update_mask = 2;
}

// AccountPhase contains the possible phases that an account can be in.
enum AccountPhase {
  // Not set. This will immediately result in an error.
  ACCOUNT_PHASE_UNSPECIFIED = 0;

  // The account is active.
  ACCOUNT_PHASE_ACTIVE = 1;

  // The account is inactive.
  ACCOUNT_PHASE_INACTIVE = 2;

  // The account is in a pending state and must be activated
  // by an administrator. Refer to the reason and description
  // field for more information on why the account is pending.
  ACCOUNT_PHASE_PENDING = 3;

  // The account has been suspended. Refer to the reason and
  // description field for more information on why the account
  // was suspended.
  ACCOUNT_PHASE_SUSPENDED = 4;

  // The account is currently being suspended. When an account
  // is in this phase the platform is actively tearing down any
  // associated resources related to the account. Once all of the
  // resources associated with the account have been removed then
  // the account will be transitioned to the ACCOUNT_PHASE_SUSPENDED
  // phase. Updates on an account in this phase will not be permitted.
  ACCOUNT_PHASE_SUSPENDING = 5;
}
