syntax = "proto3";

package chacerapp.v1;

import "chacerapp/v1/accounts.proto";
import "chacerapp/iam/v1/annotations.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "Chacerapp.V1";
option go_package = "github.com/chacerapp/apiserver/server/serverpb";
option java_multiple_files = true;
option java_outer_classname = "LocationsProto";
option java_package = "com.chacerapp.v1";
option php_namespace = "Chacerapp\\V1";

// Provides a service to manage locations
service Locations {
  // ListLocations will list all of the locations on an account.
  //
  // An empty result will be returned when the account does not exist or if
  // no locations exist on the account.
  rpc ListLocations(ListLocationsRequest) returns (ListLocationsResponse) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.get";
    option (chacerapp.iam.v1.required_permissions) = "account.locations.list";
    option (google.api.method_signature) = "parent";
    option (google.api.http) = {
      get: "/v1/{parent=accounts/*}/locations"
    };
  }

  // CreateLocation will create a new location on an account.
  //
  // A NotFound error will be returned when an account the location was
  // requested to be in does not exist. A ResourceExhausted error will
  // be returned when the account has reached its max number of locations.
  rpc CreateLocation(CreateLocationRequest) returns (Location) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.get";
    option (chacerapp.iam.v1.required_permissions) = "account.locations.create";
    option (google.api.method_signature) = "parent,location,location_id";
    option (google.api.http) = {
      post: "/v1/{parent=accounts/*}/locations",
      body: "location"
    };
  }

  // UpdateLocation will update the properties of a location on an account
  //
  // A NotFound error will be returned when a location does not exist on an
  // account.
  rpc UpdateLocation(UpdateLocationRequest) returns (Location) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.get";
    option (chacerapp.iam.v1.required_permissions) = "account.locations.update";
    option (google.api.method_signature) = "location,update_mask";
    option (google.api.http) = {
      patch: "/v1/{location.name=accounts/*/locations/*}"
      body: "location"
    };
  }

  // GetLocation will retrieve an individual location for an account.
  rpc GetLocation(GetLocationRequest) returns (Location) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.get";
    option (chacerapp.iam.v1.required_permissions) = "account.locations.get";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {
      get: "/v1/{name=accounts/*/locations/*}"
    };
  }

  // DeleteLocation will delete a location from an account.
  //
  // A NotFound error will be returned if the account or location does
  // not exist. A FailedPrecondition error will be returned when locations
  // still exist for a location. To delete a location, fist delete all
  // locations for the location. This operation cannot be undone.
  rpc DeleteLocation(DeleteLocationRequest) returns (google.protobuf.Empty) {
    option (chacerapp.iam.v1.required_permissions) = "account.accounts.get";
    option (chacerapp.iam.v1.required_permissions) = "account.locations.delete";
    option (google.api.method_signature) = "name";
    option (google.api.http) = {
      delete: "/v1/{name=accounts/*/locations/*}"
    };
  }
}

// A location where contacts can be sent.
message Location {
  option (google.api.resource) = {
    type: "chacerappapis.com/Location",
    pattern: "accounts/{account}/locations/{location}"
  };

  // The name of this location. The name must be unique within this account
  // and location, and can be up to 40 characters with the following restrictions:
  //
  // * Lowercase letters, numbers, and hyphens only.
  // * Must start with a letter.
  // * Must end with a number or a letter.
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Human friendly name for the location that should be used for a location. Must
  // be unique within the parent. Max length of 255 characters.
  string display_name = 2;

  // Longer description of a location.
  string description = 3;

  // Server-defined URL for the resource.
  string self_link = 100 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The time the resource was created.
  google.protobuf.Timestamp create_time = 101 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The time the resource was updated.
  google.protobuf.Timestamp update_time = 102 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// List the locations in the system.
message ListLocationsRequest {
  // The parent (account) where the locations will be listed
  // Specified in the format 'accounts/*'.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/Account"
  ];

  // The max number of results per page that should be returned. If the number
  // of available results is larger than `page_size`, a `next_page_token` is
  // returned which can be used to get the next page of results in subsequent
  // requests. Acceptable values are 1 to 500, inclusive. (Default: 500)
  int32 page_size = 2;

  // Specifies a page token to use. Set this to the nextPageToken returned by
  // previous list requests to get the next page of results.
  string page_token = 3;
}

// ListLocationsResponse will list the locations for an account.
message ListLocationsResponse {
  // A list of locations in the specified account.
  repeated Location locations = 1;

  // This token allows you to get the next page of results for list requests.
  // If the number of results is larger than `page_size`, use the
  // `next_page_token` as a value for the query parameter `page_token` in the
  // next request. The value will become empty when there are no more pages.
  string next_page_token = 2;
}

// CreateLocationRequest will create a new location.
message CreateLocationRequest {
  // The parent (account) where the location will be created.
  // Specified in the format 'accounts/*'.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/Account"
  ];

  // The location that should be created.
  Location location = 2 [(google.api.field_behavior) = REQUIRED];

  // The ID that should be used for the location.
  string location_id = 3;
}

// UpdateLocationRequest will update an existing location.
message UpdateLocationRequest {
  // The location resource that should replace the one present on the server.
  Location location = 1 [(google.api.field_behavior) = REQUIRED];

  // The update mask applies to the resource. For the `FieldMask` definition,
  // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

// GetLocationRequest retrieves a location for an account.
message GetLocationRequest {
  // The name (account and location) of the location to get.
  // Specified in the format 'accounts/*/locations/*'.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/Location"
  ];
}

// DeleteLocationRequest deletes a location from an account.
message DeleteLocationRequest {
  // The name (account and location) of the location to delete.
  // Specified in the format 'accounts/*/locations/*'.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "chacerappapis.com/Location"
  ];
}
